// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?

  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  accounts      Account[]
  sessions      Session[]

  customers     Customer[]
  appointments  Appointments[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String
  address    String?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  userId     String? @db.ObjectId
  User       User?  @relation(fields: [userId], references: [id])

  appointments  Appointments[]
}


model Newsletter {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  created_at    DateTime?  @default(now())
  updated_at    DateTime?  @default(now())
}

model Appointments {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId   
  description   String 
  start         String?         
  closure       String?
  status        Boolean?

  serviceId     String?   @db.ObjectId
  Services      Services? @relation(fields: [serviceId], references: [id])

  userId        String?   @db.ObjectId
  User          User?     @relation(fields: [userId], references: [id])

  customerId   String?    @db.ObjectId
  Customer     Customer?  @relation(fields: [customerId], references: [id])

  items        Item[]
  
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())  

}

model Services {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId   
  description   String      
  price         Float   

  categoryId   String?    @db.ObjectId
  Category     Category?  @relation(fields: [categoryId], references: [id])

  created_at DateTime?    @default(now())
  updated_at DateTime?    @default(now())

  Appointments Appointments[]
  items        Item[]
}

model Category {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId   
  name       String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) 
  
  services Services[]
}


model Item {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId  
  amount             Int

  appointments        Appointments?   @relation(fields: [appointment_id], references: [id])
  appointment_id      String?         @db.ObjectId

  service           Services?        @relation(fields: [service_id], references: [id])
  service_id        String?          @db.ObjectId

  created_at         DateTime?      @default(now())
  updated_at         DateTime?      @default(now())
}



